// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: insights/v1/insights.proto

package insights_v1

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SlowQueryInsights_Explain_FullMethodName                = "/insights.v1.SlowQueryInsights/Explain"
	SlowQueryInsights_CreateExplainOperation_FullMethodName = "/insights.v1.SlowQueryInsights/CreateExplainOperation"
)

// SlowQueryInsightsClient is the client API for SlowQueryInsights service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlowQueryInsightsClient interface {
	// Explain analyzes a slow query log.
	Explain(ctx context.Context, in *ExplainRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExplainResponse], error)
	// CreateExplainOperation creates a long-running operation that analyzes a slow query log.
	CreateExplainOperation(ctx context.Context, in *ExplainRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type slowQueryInsightsClient struct {
	cc grpc.ClientConnInterface
}

func NewSlowQueryInsightsClient(cc grpc.ClientConnInterface) SlowQueryInsightsClient {
	return &slowQueryInsightsClient{cc}
}

func (c *slowQueryInsightsClient) Explain(ctx context.Context, in *ExplainRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExplainResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SlowQueryInsights_ServiceDesc.Streams[0], SlowQueryInsights_Explain_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExplainRequest, ExplainResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SlowQueryInsights_ExplainClient = grpc.ServerStreamingClient[ExplainResponse]

func (c *slowQueryInsightsClient) CreateExplainOperation(ctx context.Context, in *ExplainRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SlowQueryInsights_CreateExplainOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlowQueryInsightsServer is the server API for SlowQueryInsights service.
// All implementations must embed UnimplementedSlowQueryInsightsServer
// for forward compatibility.
type SlowQueryInsightsServer interface {
	// Explain analyzes a slow query log.
	Explain(*ExplainRequest, grpc.ServerStreamingServer[ExplainResponse]) error
	// CreateExplainOperation creates a long-running operation that analyzes a slow query log.
	CreateExplainOperation(context.Context, *ExplainRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedSlowQueryInsightsServer()
}

// UnimplementedSlowQueryInsightsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSlowQueryInsightsServer struct{}

func (UnimplementedSlowQueryInsightsServer) Explain(*ExplainRequest, grpc.ServerStreamingServer[ExplainResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Explain not implemented")
}
func (UnimplementedSlowQueryInsightsServer) CreateExplainOperation(context.Context, *ExplainRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExplainOperation not implemented")
}
func (UnimplementedSlowQueryInsightsServer) mustEmbedUnimplementedSlowQueryInsightsServer() {}
func (UnimplementedSlowQueryInsightsServer) testEmbeddedByValue()                           {}

// UnsafeSlowQueryInsightsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlowQueryInsightsServer will
// result in compilation errors.
type UnsafeSlowQueryInsightsServer interface {
	mustEmbedUnimplementedSlowQueryInsightsServer()
}

func RegisterSlowQueryInsightsServer(s grpc.ServiceRegistrar, srv SlowQueryInsightsServer) {
	// If the following call pancis, it indicates UnimplementedSlowQueryInsightsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SlowQueryInsights_ServiceDesc, srv)
}

func _SlowQueryInsights_Explain_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExplainRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SlowQueryInsightsServer).Explain(m, &grpc.GenericServerStream[ExplainRequest, ExplainResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SlowQueryInsights_ExplainServer = grpc.ServerStreamingServer[ExplainResponse]

func _SlowQueryInsights_CreateExplainOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlowQueryInsightsServer).CreateExplainOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlowQueryInsights_CreateExplainOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlowQueryInsightsServer).CreateExplainOperation(ctx, req.(*ExplainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SlowQueryInsights_ServiceDesc is the grpc.ServiceDesc for SlowQueryInsights service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SlowQueryInsights_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "insights.v1.SlowQueryInsights",
	HandlerType: (*SlowQueryInsightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExplainOperation",
			Handler:    _SlowQueryInsights_CreateExplainOperation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Explain",
			Handler:       _SlowQueryInsights_Explain_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "insights/v1/insights.proto",
}
